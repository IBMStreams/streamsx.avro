namespace com.ibm.streamsx.avro.sample ;

use com.ibm.streamsx.avro::* ;
use com.ibm.streamsx.json::* ;

composite AvroSample
{
	graph
	/* Generate 100 tweets with a changing value for every tweet */
		stream<tweetT> GenerateTweet = Beacon()
		{
			param
				iterations : 100u ;
			output
				GenerateTweet : username = "Frank", tweet = "Hi, this is a cool tweet! "
					+(rstring) IterationCount(), tweettime = 1048298232ul + IterationCount() ;
		}

		/* Convert the Tweet tuple to a JSON string */
		stream<rstring jsonMessage> ConvertTupleToJson = TupleToJSON(GenerateTweet)
		{
		}

		/* Convert the JSON string to an Avro message */
		stream<blob avroMessage> ConvertToAvro = JSONToAvro(ConvertTupleToJson)
		{
			param
				avroMessageSchemaFile : dataDirectory() + "/twitter.avsc" ;
		}

		/* Display the Avro message */
		() as DisplayAvro = FileSink(ConvertToAvro)
		{
			param
				file : "/dev/stdout" ;
				flush : 1u ;
		}

		/* Convert the Avro message to a JSON string */
		stream<rstring jsonMessage> ConvertToJson = AvroToJSON(ConvertToAvro)
		{
			param
				avroMessageSchemaFile : dataDirectory() + "/twitter.avsc" ;
		}

		/* Display the retrieved JSON message */
		() as DisplayJson = FileSink(ConvertToJson)
		{
			param
				file : "/dev/stdout" ;
				flush : 1u ;
				quoteStrings : false ;
		}

}
