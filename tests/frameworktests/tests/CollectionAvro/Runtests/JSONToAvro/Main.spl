use com.ibm.streamsx.avro::JSONToAvro;
use com.ibm.streamsx.json::TupleToJSON;
use com.ibm.streamsx.testframe::FileSink1;

public composite Main {
	type
		tweetT = rstring username, rstring tweet, uint64 tweettime;

	graph
		// Generate 100 tweets with a changing value for every tweet
		stream<tweetT> GenerateTweet as O = Beacon() {
			param
				iterations : 100u ;
			output
				O : username = "Frank", tweet = "Hi, this is a cool tweet! "
					+(rstring) IterationCount(), tweettime = 1048298232ul + IterationCount() ;
		}

		// Convert the Tweet tuple to a JSON string
		stream<rstring jsonMessage> ConvertTupleToJson = TupleToJSON(GenerateTweet) { }

		// Batch the incoming tuples into Avro tuples with embedded schema
		stream<blob avroMessage> ConvertToAvro = JSONToAvro(ConvertTupleToJson) {
			param
				avroMessageSchemaFile: getApplicationDir()+"/etc/twitter.avsc";
				embedAvroSchema: true;
				//submitOnPunct: true;
				tuplesPerMessage: 1l;
		}

		// Write the Avro message to output file
		() as Sink = FileSink1(ConvertToAvro) { }

		// Write bin content
		() as BinSink = FileSink(ConvertToAvro) {
			param
				format: block;
				file: "AvroFile_{id}";
				closeMode: count;
				tuplesPerFile: 1ul;
		}

		// Write Json reference content
		() as JsonSink = FileSink(ConvertTupleToJson) {
			param
				format: line;
				file: "JsonFile_{id}";
				closeMode: count;
				tuplesPerFile: 1ul;
		}

	config
		restartable : false;
}
