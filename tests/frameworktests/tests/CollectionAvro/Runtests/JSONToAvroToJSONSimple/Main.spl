use com.ibm.streamsx.avro::JSONToAvro;
use com.ibm.streamsx.avro::AvroToJSON;
use com.ibm.streamsx.json::TupleToJSON;
use com.ibm.streamsx.testframe::FileSink1;

public composite Main {
	type
		tweetT = rstring username, rstring tweet, uint64 tweettime;

	graph
		// Generate 100 tweets with a changing value for every tweet
		stream<tweetT> GenerateTweet as O = Beacon() {
			param
				iterations : 100u ;
				//<timePerMessage>period : 0.1;
			output
				O : username = "Frank", tweet = "Hi, this is a cool tweet! "
					+(rstring) IterationCount(), tweettime = 1048298232ul + IterationCount() ;
			config
				placement: partitionColocation("Loc1");
		}

		// Convert the Tweet tuple to a JSON string
		stream<rstring jsonMessage> ConvertTupleToJson = TupleToJSON(GenerateTweet) {
			config
				placement: partitionColocation("Loc1");
		}

		// Batch the incoming tuples into Avro tuples with embedded schema
		stream<blob avroMessage> ConvertToAvro = JSONToAvro(ConvertTupleToJson) {
			param
				avroMessageSchemaFile: getApplicationDir()+"/etc/twitter.avsc";
				//<embedAvroSchema_false> embedAvroSchema: false;
				//<!embedAvroSchema_false>embedAvroSchema: true;
				//<submitOnPunct>         submitOnPunct: true;
				//<tuplesPerMessage>      tuplesPerMessage: 11l;
				//<timePerMessage>        timePerMessage: 1l;
				//<bytesPerMessage>       bytesPerMessage: 1000l;
			config
				placement: partitionColocation("Loc1");
		}
		
		/* Convert the Avro message to a JSON string */
		stream<rstring jsonMessage> ConvertToJson = AvroToJSON(ConvertToAvro) {
			//<embedAvroSchema_false>param
				//<embedAvroSchema_false> avroMessageSchemaFile: getApplicationDir()+"/etc/twitter.avsc";
		}

		// Write the Avro message to output file
		() as Sink = FileSink1(ConvertToJson) { }

	config
		restartable : false;
}
