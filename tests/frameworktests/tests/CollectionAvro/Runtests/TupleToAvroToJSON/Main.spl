use com.ibm.streamsx.avro::TupleToAvro;
use com.ibm.streamsx.avro::AvroToJSON;
use com.ibm.streamsx.json::JSONToTuple;
use com.ibm.streamsx.testframe::FileSink1;

public composite Main {
	type
		tweetT = rstring username, ustring tweet, int64 timest, boolean suspiciousContent,
				 tuple<rstring country, float32 lat, float32 lon> location, list<rstring> retweets,
				 list<tuple<rstring followeruser, float64 rate>> followers, int64 nonExistingField;

	graph
		// Generate 100 tweets with a changing value for every tweet
		stream<tweetT> GenerateTweet as O = Beacon() {
			param
				iterations : 100u;
				period : 0.1;
			output O :
				username = "Frank",
				tweet = "This JSON message also rocks: "u + (ustring)IterationCount(),
				timest = (int64)(1048298240ul + IterationCount()),
				location = {country = "DK", lat = 41.24w + (float32)IterationCount(), lon = -5.1w - (float32)IterationCount()},
				retweets = ["User" + (rstring)(0ul + IterationCount()), "User" + (rstring)(1ul + IterationCount()), "User" + (rstring)(2ul + IterationCount()), "User" + (rstring)(3ul + IterationCount()), "User" + (rstring)(4ul + IterationCount())],
				followers = [ {followeruser="Follower" + (rstring)(0ul + IterationCount()), rate=0.0}, {followeruser="Follower"+(rstring)(1ul+IterationCount()), rate=1.0}, {followeruser="Follower"+(rstring)(2ul+IterationCount()), rate=2.0}, {followeruser="Follower"+(rstring)(3ul+IterationCount()), rate=3.0}, {followeruser="Follower"+(rstring)(4ul+IterationCount()), rate=4.0}],
				suspiciousContent = (IterationCount() % 3ul == 0ul);
		}

		// Batch the incoming tuples into Avro tuples with embedded schema
		stream<blob avroMessage> ConvertToAvro = TupleToAvro(GenerateTweet) {
			param
				avroMessageSchemaFile: getApplicationDir()+"/etc/twitter_complex.avsc";
				//<embedAvroSchema_false> embedAvroSchema: false;
				//<!embedAvroSchema_false>embedAvroSchema: true;
				//<submitOnPunct>         submitOnPunct: true;
				//<tuplesPerMessage>      tuplesPerMessage: 11l;
				//<timePerMessage>        timePerMessage: 1l;
				//<bytesPerMessage>       bytesPerMessage: 10000l;
		}

		stream<rstring jsonMessage> ConvertToJson = AvroToJSON(ConvertToAvro) {
			//<embedAvroSchema_false>param
				//<embedAvroSchema_false> avroMessageSchemaFile: getApplicationDir()+"/etc/twitter_complex.avsc";
		}
		
		// output to Tuple 
		stream<tweetT> ConvertToTuple = JSONToTuple(ConvertToJson) {}
		
		// Write the Avro message to output file
		() as Sink = FileSink1(ConvertToTuple) {
			param
				fnameTuples       : "Tuples";
				fnameWindowMarker : "Tuples";
		}

		// Write reference output
		stream<tweetT> GenerateTweetPunctuated = Punctor(GenerateTweet) {
			param
				position: after;
				//<tuplesPerMessage>  punctuate: ((timest - 1048298240l) % 11l == 10l) || ( timest == (1048298240l + 99l));
				//<embedAvroSchema_false submitOnPunct>punctuate: timest == (1048298240l + 99l);
				//<timePerMessage bytesPerMessage> punctuate: false;
		}
		() as Reference = FileSink1(GenerateTweetPunctuated) {
			param
				fnameTuples       : "TuplesReference";
				fnameWindowMarker : "TuplesReference";
				fnameFinalMarker  : "";
		}
		
	config
		restartable : false;
}
